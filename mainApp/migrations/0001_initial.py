# Generated by Django 5.2.1 on 2025-08-15 09:45

import cloudinary.models
import django.contrib.auth.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import smart_selects.db_fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Semester',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('year', models.IntegerField(error_messages={'blank': 'This field cannot be blank.'})),
                ('term', models.CharField(choices=[('fall', 'Fall'), ('spring', 'Spring'), ('summer', 'Summer')], max_length=6)),
            ],
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(error_messages={'blank': 'This field cannot be blank.', 'unique': 'This subject name has already been used.'}, max_length=100, unique=True, validators=[django.core.validators.MaxLengthValidator(100)])),
                ('level', models.CharField(choices=[('1', 'Level 1'), ('2', 'Level 2'), ('3', 'Level 3'), ('4', 'Level 4'), ('5', 'Level 5')], max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(error_messages={'blank': 'This field cannot be blank.', 'unique': 'This ID has already been used.'}, max_length=9, unique=True, validators=[django.core.validators.MaxLengthValidator(9)])),
                ('email', models.EmailField(error_messages={'blank': 'This field cannot be blank.', 'unique': 'This email address is already in use.'}, max_length=254, unique=True, validators=[django.core.validators.EmailValidator(message='Please enter a valid email address.')])),
                ('password', models.CharField(validators=[django.core.validators.MaxLengthValidator(128)])),
                ('banned', models.BooleanField(default=False, help_text='Indicates whether the user is banned from the system.')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Link',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(error_messages={'blank': 'This field cannot be blank.'}, max_length=100, validators=[django.core.validators.MaxLengthValidator(100)])),
                ('description', models.CharField(error_messages={'blank': 'This field cannot be blank.'}, max_length=300, validators=[django.core.validators.MaxLengthValidator(300)])),
                ('link', models.TextField()),
                ('pending', models.BooleanField(default=True)),
                ('posted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='links', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('topic_name', models.CharField(error_messages={'blank': 'This field cannot be blank.'}, max_length=100, validators=[django.core.validators.MaxLengthValidator(100)])),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='topics', to='mainApp.subject')),
            ],
        ),
        migrations.CreateModel(
            name='Sheets',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('sheet_name', models.CharField(error_messages={'blank': 'This field cannot be blank.'}, max_length=100, validators=[django.core.validators.MaxLengthValidator(100)])),
                ('sheet_file', cloudinary.models.CloudinaryField(error_messages={'blank': 'This field cannot be blank.'}, max_length=255, verbose_name='file')),
                ('semester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sheets', to='mainApp.semester')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sheets', to='mainApp.subject')),
                ('topic', smart_selects.db_fields.ChainedForeignKey(auto_choose=True, blank=True, chained_field='subject', chained_model_field='subject', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sheets', to='mainApp.topic')),
            ],
        ),
        migrations.CreateModel(
            name='Notes',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('note_name', models.CharField(error_messages={'blank': 'This field cannot be blank.'}, max_length=100, validators=[django.core.validators.MaxLengthValidator(100)])),
                ('note_file', cloudinary.models.CloudinaryField(error_messages={'blank': 'This field cannot be blank.'}, max_length=255, verbose_name='file')),
                ('semester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='mainApp.semester')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='mainApp.subject')),
                ('topic', smart_selects.db_fields.ChainedForeignKey(auto_choose=True, blank=True, chained_field='subject', chained_model_field='subject', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='mainApp.topic')),
            ],
        ),
        migrations.CreateModel(
            name='Mcq',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('pending', models.BooleanField(default=False)),
                ('mcq_name', models.CharField(error_messages={'blank': 'This field cannot be blank.'}, max_length=200, validators=[django.core.validators.MaxLengthValidator(200)])),
                ('mcq_a', models.CharField(error_messages={'blank': 'This field cannot be blank.'}, max_length=200, validators=[django.core.validators.MaxLengthValidator(200)])),
                ('mcq_b', models.CharField(error_messages={'blank': 'This field cannot be blank.'}, max_length=200, validators=[django.core.validators.MaxLengthValidator(200)])),
                ('mcq_c', models.CharField(error_messages={'blank': 'This field cannot be blank.'}, max_length=200, validators=[django.core.validators.MaxLengthValidator(200)])),
                ('mcq_d', models.CharField(error_messages={'blank': 'This field cannot be blank.'}, max_length=200, validators=[django.core.validators.MaxLengthValidator(200)])),
                ('mcq_answer', models.CharField(choices=[('A', 'Option A'), ('B', 'Option B'), ('C', 'Option C'), ('D', 'Option D')], error_messages={'blank': 'This field cannot be blank.'}, max_length=1)),
                ('posted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='mcqs', to=settings.AUTH_USER_MODEL)),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mcqs', to='mainApp.subject')),
                ('topic', smart_selects.db_fields.ChainedForeignKey(auto_choose=True, blank=True, chained_field='subject', chained_model_field='subject', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='mcqs', to='mainApp.topic')),
            ],
        ),
    ]
